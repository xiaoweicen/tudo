{"version":3,"sources":["item.tsx","dialog.tsx","listItem.tsx","todoList.tsx","serviceWorker.ts","index.tsx"],"names":["Item","id","name","time","complete","date","Date","this","toLocaleString","Dialog","props","myRef","React","createRef","handleClick","bind","len","nums","newid","current","value","newitem","addNewTask","className","type","ref","placeholder","onClick","Component","ListItem","handleFinished","handleDelete","totalChange","item","finish","finishedChange","itemStyle","key","toString","style","backgroundColor","TodoList","state","list","finished","allTask","push","setState","count","forEach","splice","updateFinished","addTask","length","map","index","updateTotal","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.de50452b.chunk.js","sourcesContent":["class Item {\r\n\r\n    public id: number;\r\n    public name: string;\r\n    public time: string;\r\n    public complete: boolean;\r\n\r\n    constructor(id: number, name: string) {\r\n        const date = new Date();\r\n        this.id = id;\r\n        this.name = name;\r\n        this.time = date.toLocaleString();\r\n        this.complete = false;\r\n    }\r\n\r\n    public finish() {\r\n        this.complete = !this.complete;\r\n        return this;\r\n    }\r\n\r\n}\r\n\r\nexport default Item;","import React from 'react';\r\nimport Item from './item';\r\n\r\n\r\nclass Dialog extends React.Component<{ addNewTask: any; nums: number }>{\r\n    public myRef: any;\r\n\r\n\r\n    constructor(props: Readonly<{ addNewTask: any; nums: number; }>) {\r\n        super(props);\r\n        this.myRef = React.createRef();\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick() {\r\n        let len = this.props.nums;\r\n        let newid = len > 0 ? len : 0;\r\n        let name = this.myRef.current.value;\r\n        if (name !== '') {\r\n            let newitem = new Item(newid, name)\r\n\r\n            this.myRef.current.value = '';\r\n            this.props.addNewTask(newitem);\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"dialog\">\r\n                <div>\r\n                    <span>新建任务</span>\r\n                    <input type=\"text\" ref={this.myRef} placeholder=\"请输入事项\" />\r\n\r\n                    <input type=\"button\" value=\"添加\" onClick={this.handleClick} />\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport Item from './item';\r\nclass ListItem extends React.Component<{ item: Item, finishedChange: any, totalChange: any, key: number }>{\r\n    constructor(props: Readonly<{ item: Item; finishedChange: any, totalChange: any, key: number; }>) {\r\n        super(props);\r\n        this.handleFinished = this.handleFinished.bind(this);\r\n        this.handleDelete = this.handleDelete.bind(this);\r\n\r\n    }\r\n    handleDelete() {\r\n        this.props.totalChange(this.props.item.id); //执行父组件传来的方法\r\n    }\r\n\r\n    handleFinished() {\r\n        this.props.item.finish();\r\n        this.props.finishedChange(); //执行父组件传来的方法\r\n    }\r\n\r\n    render() {\r\n        const item = this.props.item;\r\n        let itemStyle:string = item.complete ? \"finish\" : \"unfinish\";\r\n        return (\r\n            <li key={item.id} className={itemStyle}>\r\n                <span\r\n                    onClick={this.handleFinished}\r\n                    id={item.id.toString()}\r\n                    className=\"check-btn\"\r\n                    style={{ backgroundColor: item.complete ? 'rgb(61, 91, 98)' : '#fff' }}\r\n                ></span>\r\n                <span>{item.name}</span>\r\n                <span onClick={this.handleDelete} className=\"delete-btn\">删除</span>\r\n                <span className=\"time\">{item.time}</span>\r\n            </li>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default ListItem;","import React from 'react';\r\nimport Item from './item';\r\nimport Dialog from './dialog'\r\nimport ListItem from './listItem';\r\n\r\nclass TodoList extends React.Component {\r\n    public state: { list: Item[], finished: number };\r\n\r\n\r\n    constructor(props: { list: Item[]; }) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            list: [new Item(0, \"写代码\"),\r\n            new Item(1, \"读书\"),\r\n            new Item(2, \"打篮球\")\r\n            ], finished: 0\r\n\r\n        };\r\n    }\r\n    public addTask(newitem: Item): void {\r\n        let allTask = this.state.list;\r\n        allTask.push(newitem);\r\n        this.setState({\r\n            list: allTask\r\n        });\r\n    }\r\n    //更新已完成计数，在组件中以props的形式传递给子组件\r\n    updateFinished() {\r\n        let count = 0;\r\n        this.state.list.forEach((item) => {\r\n            if (item.complete) {\r\n                count++;\r\n            }\r\n        });\r\n        this.setState({\r\n            finished: count\r\n        });\r\n    }\r\n\r\n\r\n    //删除并更新任务，在组件中以props的形式传递给子组件\r\n    updateTotal(id: number) {\r\n        this.state.list.splice(id, 1);\r\n        this.updateFinished();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>ToDo</h1>\r\n                <Dialog addNewTask={this.addTask.bind(this)} nums={this.state.list.length} />\r\n                <ul>\r\n                    {this.state.list.map((item, index) =>\r\n                        <ListItem\r\n                            item={item}\r\n                            finishedChange={this.updateFinished.bind(this)}\r\n                            totalChange={this.updateTotal.bind(this)}\r\n                            key={index}\r\n                        />\r\n                    )}\r\n                    <li>{this.state.finished} / {this.state.list.length}完成</li>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoList;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './main.css';\n// import './index.css';\n// import App from './App';\nimport TodoList from './todoList';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TodoList />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}